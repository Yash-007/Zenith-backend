datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id String @id @default(uuid())
    email String @unique
    password String
    name String
    avatar String?
    age Int?
    gender String?
    city String?
    interests Int[]
    currentPoints Int @default(0)
    pointsUsed Int @default(0)
    totalPointsEarned Int @default(0)
    currentStreak Int @default(0)
    longestStreak Int @default(0)
    level String @default("beginner")
    challengesCompleted Int @default(0)
    challengesSubmitted Int @default(0)
    challengesInReview Int @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category{
    id Int @id @default(autoincrement())
    name String
    description String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Challenge {
    id String @id @default(uuid())
    title String
    description String
    longDescription String
    category Int
    time Int
    points Int
    level Int  //0, 1, 2
    submissionType String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum SubmissionStatus {
    PENDING
    COMPLETED
    REJECTED
}

model Submission {
    id String @unique @default(uuid())
    userId String 
    challengeId String
    challengeName String
    isChallengeExists Boolean @default(true)
    proofs Json
    status SubmissionStatus @default(PENDING)
    remarks String?
    submittedAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, challengeId])
}

enum RewardStatus {
    PENDING
    COMPLETED
}

model RewardHistory{
    id String @id @default(uuid())
    userId String
    pointsRewarded Int
    rewardType String
    status RewardStatus? @default(PENDING)
    rewardedAt DateTime @default(now())
    updatedAt DateTime @updatedAt

  @@map("reward_history")
}

model Chat{
    id String @id @default(uuid())
    userId String
    query String
    response String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("chats")
}

model Contact {
    id String @id
    entity String
    name String
    contact String
    email String
    active Boolean
    createdAt DateTime @default(now())

    @@map("contacts")
}

model FundAccount {
    id String @id
    entity String
    contactId String
    accountType String
    vpa Json 
    active Boolean
    createdAt DateTime @default(now())
}

model Transaction {
    id String @id
    razorpayTransactionId String
    merchantAccountNumber String
    entity String
    idempotencyKey String
    fundAccountId String
    amount Int
    currency String
    fees Int
    tax Int
    status String
    utr String?
    mode String
    purpose String
    referenceId String?
    narration String?
    statusDetails Json?
    statusDetailsId String?
    feeType String?
    errorDetails Json?
    failureReason String?
    merchantId String?
    createdAt DateTime @default(now())
}